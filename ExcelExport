package com.cjsuo.export.excel;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.StringReader;
import java.text.SimpleDateFormat;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.format.Alignment;
import jxl.format.Border;
import jxl.format.BorderLineStyle;
import jxl.format.UnderlineStyle;
import jxl.write.Label;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.jdom.Attribute;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.xml.sax.InputSource;

import com.whir.common.util.CommonUtils;

/**
 * Excel导出工具类
 * 
 */
public class ExcelExport {
    
    private static Logger logger = Logger.getLogger(ExcelExport.class.
            getName());
    
    //每个sheet记录数
    private int COUNT_PER_SHEET = 10000;
    
    public ExcelExport() {
    }
    
    public void dataToExcel(HttpServletResponse response, String xml) {
        dataToExcel(null, response, xml);
    }

    /**
     * 导出excel
     * 
     * @param response
     *            HttpServletResponse
     * @param xml
     *            String 要求输入xml文件
     */
    public void dataToExcel(HttpServletRequest request, HttpServletResponse response, String xml) {
        response.reset();
        response.setContentType("application/vnd.ms-excel;charset=UTF-8");
        
        long startTime = System.currentTimeMillis();
        
        InputStream in = null;
        OutputStream out = null;
        OutputStream os = null;
        File tempFile = null;
        try {
            os = response.getOutputStream();
            
            xml = "<data>" + xml + "</data>";
            Element node = getRootElement(xml);
            Element execlTitleEle = node.getChild("execlTitle");
            Element headerEle = node.getChild("header");
            List rows = node.getChildren("rows");

            String execlTitle = execlTitleEle.getValue();
            
            String encodeTitle = execlTitle;
            
           /* if(request != null){
                encodeTitle = CommonUtils.encodeName(execlTitle, request);
                
            }else {
                encodeTitle = new String(execlTitle.getBytes("GBK"), "iso8859-1");
            }
            
            response.setHeader("Content-disposition", "attachment;filename="
                    + encodeTitle
                    + ".xls");*/
            if(request != null){
            	String whir_agent =request.getHeader("User-Agent")!=null?request.getHeader("User-Agent").toLowerCase():"";
                whir_agent=com.whir.component.security.crypto.EncryptUtil.htmlcode(whir_agent)+"";
               if(whir_agent.indexOf("firefox") != -1){//中文文件名乱码解决start
                  response.addHeader("Content-Disposition", "attachment;filename*=UTF-8''"+new String(encodeTitle.getBytes("UTF-8"), "ISO8859-1")+".xls");
                   //中文文件名乱码解决end
                }else{
                 response.addHeader("Content-Disposition", "attachment;filename=\"" +(com.whir.component.util.SystemUtils.isCOS4Firefox4(request)?new String(encodeTitle.getBytes("UTF-8"), "ISO8859-1"):encodeTitle)+".xls\"");
                }
            }else{
            	encodeTitle = new String(execlTitle.getBytes("GBK"), "iso8859-1");
            	response.setHeader("Content-disposition", "attachment;filename="
                         + encodeTitle
                         + ".xls");
            }
            
            List headerNameList = headerEle.getChildren("headerName");
            
            String tempDir = System.getProperty("java.io.tmpdir");
            logger.debug("tempDir:"+tempDir);
            
            WorkbookSettings wbSetting = new WorkbookSettings();
            wbSetting.setGCDisabled(true);
            wbSetting.setUseTemporaryFileDuringWrite(true);
            wbSetting.setTemporaryFileDuringWriteDirectory(new File(tempDir));//临时文件夹的位置
            
            String tempfilename = System.currentTimeMillis() + "_export.xls";
            
            tempFile = new File(tempDir + "/" + tempfilename);
            
            //WritableWorkbook wwb = Workbook.createWorkbook(os, wbSetting);
            WritableWorkbook wwb = Workbook.createWorkbook(tempFile, wbSetting);
            
            int cols = headerNameList != null ? headerNameList.size() : 0;
            int rowNum = rows != null && !rows.isEmpty()? rows.size() : 0;

            int sheetnum = rowNum / COUNT_PER_SHEET + 1;
            
            SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");
            
            WritableFont font = new WritableFont(WritableFont.createFont("宋体"), 11, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE);
            WritableCellFormat headerFmt = new WritableCellFormat(font);
            headerFmt.setAlignment(Alignment.CENTRE); // 设置对齐方式  
            headerFmt.setBorder(Border.ALL, BorderLineStyle.THIN);
            
            WritableCellFormat wcfS = new WritableCellFormat();
            wcfS.setBorder(Border.ALL, BorderLineStyle.THIN);

            for (int i = 0; i < sheetnum; i++) {
                WritableSheet sheet = wwb.createSheet("第" + (i + 1) + "页", i);
                for (int j = 0; j < cols; j++) {
                    Element headerNameEle = (Element) headerNameList.get(j);
                    sheet.setColumnView(j, 30);// 将每一列的宽度设为30
                    String headerName = headerNameEle.getValue();

                    Label label = new Label(j, 0, headerName, headerFmt);
                    sheet.addCell(label);
                }
                
                int curRow = 1;
                for (int k = COUNT_PER_SHEET * i; k < COUNT_PER_SHEET * (i + 1) && k < rowNum; k++) {
                    Element rowsEle = (Element) rows.get(k);
                    List columns = rowsEle.getChildren("column");
                    if (columns != null) {
                        int colSize = columns.size();
                        for (int n = 0; n < colSize; n++) {
                            Element column = (Element) columns.get(n);
                            String colValue = column.getValue();
                            Attribute typeAttr = column.getAttribute("type");
                            String type = typeAttr.getValue().toLowerCase();
                            
                            if ("date".equals(type)) { // 格式化日期yyyy-MM-dd
                                Attribute outTypeAttr = column.getAttribute("outType");
                                String outType = outTypeAttr.getValue();
                                jxl.write.DateFormat df = new jxl.write.DateFormat(
                                        outType);
                                jxl.write.WritableCellFormat wcfDF = new jxl.write.WritableCellFormat(
                                        df);
                                //wcfDF.setWrap(true);// 自动换行
                                wcfDF.setBorder(Border.ALL, BorderLineStyle.THIN);
                                
                                // wcfDF.setAlignment(jxl.format.Alignment.CENTRE);
                                // //左右居中
                                // wcfDF.setVerticalAlignment(jxl.format.VerticalAlignment.CENTRE);
                                // //上下居中
                                // wcfDF.setBorder(Border.ALL,
                                // BorderLineStyle.THIN, Colour.BLACK); //黑色边框
                                // wcfDF.setBackground(Colour.YELLOW); //黄色背景

                                jxl.write.DateTime labelDTF = new jxl.write.DateTime(
                                        n, curRow, sf.parse(colValue), wcfDF);
                                sheet.addCell(labelDTF);
                                
                            } else if ("number".equals(type)) { // 格式化数字
                                Attribute outTypeAttr = column
                                        .getAttribute("outType");
                                String outType = outTypeAttr.getValue();
                                jxl.write.NumberFormat nf = new jxl.write.NumberFormat(
                                        outType);
                                WritableCellFormat wcfN = new WritableCellFormat(
                                        nf);
                                wcfN.setAlignment(jxl.format.Alignment.RIGHT);
                                //wcfN.setWrap(true); // 自动换行
                                wcfN.setBorder(Border.ALL, BorderLineStyle.THIN);
                                
                                jxl.write.Number labelNF = new jxl.write.Number(
                                        n, curRow, new Double(colValue)
                                                .doubleValue(), wcfN);
                                sheet.addCell(labelNF);
                                
                            } else if ("string".equals(type)) { // 普通字符
                                Label label = new Label(n, curRow,
                                        colValue == null ? "" : colValue
                                                .toString(), wcfS);
                                sheet.addCell(label);
                            }
                        }
                    }
                    curRow++;
                }
            }
            wwb.write();
            wwb.close();
            
            logger.debug(">>process time:"+(System.currentTimeMillis() - startTime) + "'s.");
            
            in = new BufferedInputStream(new FileInputStream(tempDir + "/" + tempfilename));
            out = new BufferedOutputStream(os);

            byte[] buf = new byte[8192];
            int n = -1;

            while( -1 != (n = in.read(buf, 0, buf.length))) {
                out.write(buf, 0, n);
            }

            out.flush();
            
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            
            try {
                if(out != null) {
                    out.close();
                }
            } catch(Exception e) {
            }
            
            try {
                if(in != null) {
                    in.close();
                }
            } catch(Exception e) {
            }
            
            if(tempFile != null) {
                if(tempFile.exists()){
                    tempFile.delete();
                }
            }
        }
        
        logger.debug(">>process time:"+(System.currentTimeMillis() - startTime) + "'s.");
    }

    /**
     * 拼装excel名和头部名，返回xml
     * 
     * @param title
     *            String excel名
     * @param header
     *            String[][]头部名
     * @return String
     */
    public String installExcelTitleAndHeader(String title, String[][] header) {
        String xml = "";
        xml += "<execlTitle>" + title + "</execlTitle>";
        xml += "<header>";
        if (header != null && header.length > 0) {
            for (int i = 0, len=header.length; i < len; i++) {
                String arr = header[i][0];
                xml += "<headerName>" + arr + "</headerName>";
            }
        }
        xml += "</header>";

        return xml;
    }

    /**
     * 拼装每列数据，返回xml
     * 
     * @param val
     *            String列值
     * @param type
     *            String数据类型
     * @param outType
     *            String输出类型
     * @return String
     */
    public String installExcelColumn(String val, String type, String outType) {
        StringBuffer xml = new StringBuffer("");
        if ("String".equals(type)) {
            xml.append("<column type='String'><![CDATA[" + checkXmlChar(val) + "]]></column>");
        } else {
            xml.append("<column type='" + type + "'  outType='" + outType + "'>" + val + "</column>");
        }
        
        return xml.toString();
    }

    /**
     * 返回xml元素根节点
     * 
     * @param xml
     * @return
     */
    public Element getRootElement(String xml) {
        try {
            StringReader xmlString = new StringReader(xml);
            InputSource source = new InputSource(xmlString);
            SAXBuilder saxb = new SAXBuilder();
            Document doc = saxb.build(source);
            Element root = doc.getRootElement();
            return root;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * 测试解析xml文件
     * 
     * @param xml
     *            String
     */
    public void resolveXml(String xml) {
        try {
            Element node = getRootElement(xml);
            Element execlTitleEle = node.getChild("execlTitle");
            Element headerEle = node.getChild("header");
            List rows = node.getChildren("rows");

            String execlTitle = execlTitleEle.getValue();
            List headerNameList = headerEle.getChildren("headerName");
            if (headerNameList != null && headerNameList.size() > 0) {
                for (int i = 0, len=headerNameList.size(); i < len; i++) {
                    Element headerNameEle = (Element) headerNameList.get(i);
                    String headerName = headerNameEle.getValue();
                }
            }
            
            if (rows != null && rows.size() > 0) {
                for (int i = 0, len=rows.size(); i < len; i++) {
                    Element rowsEle = (Element) rows.get(i);
                    List columns = rowsEle.getChildren("column");
                    if (columns != null && columns.size() > 0) {
                        for (int j = 0; j < columns.size(); j++) {
                            Element column = (Element) columns.get(j);
                            String colValue = column.getValue();
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public String checkXmlChar(String data) {
        StringBuffer appender = new StringBuffer("");
        
        if (StringUtils.isNotEmpty(data)) {
            appender = new StringBuffer(data.length());
            
            for (int i = 0, j=data.length(); i < j; i++) {
                char ch = data.charAt(i);
                if ((ch == 0x9) || (ch == 0xA) || (ch == 0xD)
                        || ((ch >= 0x20) && (ch <= 0xD7FF))
                        || ((ch >= 0xE000) && (ch <= 0xFFFD))
                        || ((ch >= 0x10000) && (ch <= 0x10FFFF)))
                    appender.append(ch);
            }
        }
        
        String result = appender.toString();
        
        return result.replaceAll("]]>", "");
    }
    
    public void dataToExcel(HttpServletResponse response, String excelTitle,
            String[][] excelHeaderArr, List excelList) {
        dataToExcel(null, response, excelTitle, excelHeaderArr, excelList);
    }

    /**
     * 依据封装xml格式，导出excel
     * 
     * @param response
     * @param excelTitle 文件显示名
     * @param excelHeaderArr 列头
     * @param excelList 数据
     */
    public void dataToExcel(HttpServletRequest request, HttpServletResponse response, String excelTitle,
            String[][] excelHeaderArr, List excelList) {
        StringBuffer result = new StringBuffer("");
        result.append(installExcelTitleAndHeader(excelTitle, excelHeaderArr));
        if (excelList != null) {
            int excelListSize = excelList.size();
            if(excelListSize > 0){
                for (int i = 0; i < excelListSize; i++) {
                    // 循环每行数据，每行数据开始要加"<rows>"
                    result.append("<rows>");
                    Object[] obj = (Object[]) excelList.get(i);
                    for (int j = 0, alen=excelHeaderArr.length; j < alen; j++) {
                        String val = obj[j]!=null?obj[j].toString():"";
                        String type = excelHeaderArr[j][1];
                        String outType = excelHeaderArr[j][2];
                        //result.append(installExcelColumn(val, type, outType));
                        if ("String".equals(type)) {
                            result.append("<column type='String'><![CDATA[" + checkXmlChar(val) + "]]></column>");
                        } else {
                            result.append("<column type='" + type + "'  outType='" + outType + "'>" + val + "</column>");
                        }
                    }
                    // 每行数据结束要加"</rows>"
                    result.append("</rows>");
                }
            }
        }
        
        logger.debug("正在导出...");
        
        dataToExcel(request, response, result.toString());
        
        logger.debug("导出结束.");
    }

}
